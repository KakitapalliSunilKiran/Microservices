Binary Search

class Solution {
    public int search(int[] a, int key) {
           int start=0;
           int end=a.length-1;
            while(start<=end){
                int mid=start+(end-start)/2;
                if(a[mid]==key){
                    return mid;
                }
                else if(a[mid]>key){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
        return -1;
    }
}
=================================================================
## Find First and Last Position of Element in Sorted Array
class Solution {
    public int[] searchRange(int[] nums, int key) {
        int first= searchfirst( nums,  key);
            int tat[]=new int[2];
            if(first==-1)
            {
                tat[0]=tat[1]=-1;
                return tat;
            }
            
        int last= searchlast( nums,  key);
            tat[0]=first;
            tat[1]=last;
        return tat;
    }
    public int searchfirst(int[] a, int key) {
           int start=0;
           int end=a.length-1;
            int act=-1;
            while(start<=end){
                int mid=start+(end-start)/2;
                if(a[mid]==key){
                    act= mid;
                    end=mid-1;
                }
                else if(a[mid]>key){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
        return act;
    }
    
     public int searchlast(int[] a, int key) {
           int start=0;
           int end=a.length-1;
            int act=-1;
            while(start<=end){
                int mid=start+(end-start)/2;
                if(a[mid]==key){
                    act= mid;
                    start=mid+1;
                }
                else if(a[mid]>key){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
        return act;
    }
    
    
}
===============================================================================
278. First Bad Version
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        
        int start=0;
        int end=n;
        int req=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(isBadVersion(mid)){
                req=mid;
                end=mid-1;
                
            }else{
                start=mid+1;
            }
        }
        return req;
        
    }
}
=============================================================================
35. Search Insert Position

class Solution {
    public int searchInsert(int[] nums, int target) {
        int x=returnKey( nums,  target);
        return x==-1?nums.length:x;
    }
    int returnKey(int[] nums, int target){
        int start=0;
        int end=nums.length-1;
        int req=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                 req=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return req;
    }
}
===============================================================================
Floor in a Sorted Array

class Solution{
    
    // Function to find floor of x
    // arr: input array
    // n is the size of array
    static int findFloor(long arr[], int n, long x)
    {
        int start=0;
        int end=arr.length-1;
        int req=-1;
        int mid=0;
        while(start<=end){
             mid=start+(end-mid)/2;
            if(arr[mid]==x){
                req=mid;
                return mid;
            }else if(arr[mid]<x){
               req=mid;
               start=mid+1;
            }else{
               end=mid-1; 
            }
        }
        return req;
    }
    
}
===========================================================================================
69. Sqrt(x)

class Solution {
    public int mySqrt(int x) {
        
        if(x==0)
            return 0;
        int start=1;
        int end=x;
        int answer=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(mid==x/mid){
                return mid;
            }
            else if(mid>x/mid){
                end=mid-1;
            }
            else{
                answer=mid;
                start=mid+1;
            }
                
        }
        return answer;
        
    }
}
=================================================================================================
367. Valid Perfect Square

class Solution {
    public boolean isPerfectSquare(int x) {
        if(x==1)
            return true;
        boolean ans=false;
        long start=1;
        long end=x;
         while(start<=end){
            long mid=start+(end-start)/2;
            if(mid*mid==x){
                return true;
            }
            else if(mid*mid>x){
               // ans=false;
                end=mid-1;
            }
             else{
               // ans=false;
                start=mid+1;
             }
                
        }
        return false;
   }
}
=================================================================================================
Ceiling in a sorted array
public class Solution {
    public static int ceilingInSortedArray(int n, int x, int[] arr) {
        // Write your code here.
        int start=0;
        int end=n;
        int ans=0;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(arr[mid]==x){
                return arr[mid];
            }
            else if(arr[mid]>x){
                ans=arr[mid];
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
}
===============================================================================================
74. Search a 2D Matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
       int rows=matrix.length;
       int cols=matrix[0].length; 
       int start=0;
       int end=rows*cols-1; 
       while(start<=end){
           int mid=start+(end-start)/2;
           int rowIndex=mid/cols; 
           int colIndex=mid%cols;
           if(matrix[rowIndex][colIndex]==target){
               return true;
           }else if(matrix[rowIndex][colIndex]>target){
               end=mid-1;
           }else{
               start=mid+1;
           }
       }
     return false;
   }
}
==================================================================================================
33. Search in Rotated Sorted Array

class Solution {
    public int search(int[] nums, int k) {
        int start=0;
        int end=nums.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==k)
                return mid;
            if(nums[mid]>=nums[start]){
                if(nums[start]<=k && k<nums[mid]){
                    end=mid-1;
                }else{
                    start=mid+1;
                }
            }else{
               if(nums[mid]<k && k<=nums[end]){
                    start=mid+1;
                }else{
                    end=mid-1;
                } 
            }
        }
        return -1;
    }
}

=======================================================================================================
153. Find Minimum in Rotated Sorted Array

class Solution {
    public int findMin(int[] nums) {
        
        int start=0;
        int end=nums.length-1;
        
        if(nums[start]<=nums[end])
            return nums[start];
        
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]>nums[mid+1])
                return nums[mid+1];
            if(nums[mid]<nums[mid-1])
                return nums[mid];
            if(nums[mid]>nums[start]){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return -1;
    }
}
==========================================================================================================

class Solution 
{
    //Function to find minimum number of pages.
    public static int findPages(int[]A,int N,int M)
    {
        //Your code here
        int sum=0;
        for(int i=0;i<A.length;i++){
            sum=sum+A[i];
        }
        int start=0;
        int end=sum;
        int ans=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(isPossible(A,mid,M)){
                ans=mid;
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return ans;
    }
    static boolean isPossible(int A[],int bound,int student){
        int currentSum=0;
        int currentStudentCount=1;
        for(int i:A){
            if(i>bound)
            return false;
            
            if(currentSum+i<=bound){
                currentSum=currentSum+i;
            }else{
                currentStudentCount+=1;
                currentSum=i;
                if(currentStudentCount>student)
                return false;
            }
        }
        return true;
    }
    
};
=======================================================================================================
The Painter's Partition Problem-II

 class Solution{
    static long minTime(int[] arr,int n,int k){
        //code here
        long sum=0;
        for(int x:arr){
            sum=sum+x;
        }
        long start=0;
        long end=sum;
        long ans=-1;
        while(start<=end){
            long mid=start+(end-start)/2;
            if(isPossible(mid,arr,k)){
                ans=mid;
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return ans;
    }
    static boolean isPossible(long bound,int arr[],int painters){
        int currentSum=0;
        int paintersCount=1;
        for(int i:arr){
            if(i>bound)
            return false;
            if(i+currentSum<=bound){
               currentSum=currentSum+i; 
            }else{
                paintersCount+=1;
                currentSum=i;
                if(paintersCount>painters)
                return false;
            }
        }
        return true;
    }
}
==================================================================================================




